def vertical_sided_polygon(data, line, northing, magAdj, distAdj, inc, dec, mi, z1, z2, x0, x1, x2, x3, y0, y1, y2, y3):

    

    #-----Shape Paramters-----#

    #Arrays for shape

    x = [-x0,x1,x2,-x3]  #-x0,x1,x2,-x3

    y = [-y0,-y1,y2,y3]  #-y0,-y1,y2,y3



    #Sides for polygon shape

    sides = 4   

    

    '''

    #experimental 4-sided prism

    x must be the northing (north coordinate), 

    y must be the easting (east coordinate),

    COORDINATES MUST BE ENTERED IN A CLOCKWISE ORDER

    #map units can be arbitrary but must be consistent for example, all units in meters

    '''



    ###############################################################################

    ####-----------Calculate magnetic anomaly for polygonal prism--------------####

    ###############################################################################





    minc = inc*(ma.pi/180) #inclination down in rad

    mdec = dec*(ma.pi/180)  #declination east in rad



    #calculate direction cosines for magnetization

    ml = ma.cos(minc) * ma.cos(mdec)

    mm = ma.cos(minc) * ma.sin(mdec)

    mn = ma.sin(minc)



    #components of magnetization in x,y,z directions

    mx = mi * ml

    my = mi * mm

    mz = mi * mn



    #set earths field

    einc = 65*(ma.pi/180)  #inclination down in rad

    edec = 10*(ma.pi/180)   #declination east in rad



    el = ma.cos(einc) * ma.cos(edec)

    em = ma.cos(einc) * ma.sin(edec)

    en = ma.sin(einc)



    #proportionality constant is magnetic permeability * 1e9 to convert of nT

    prop = 400*ma.pi



    px_list = []

    b_total_list = []



    #------j LOOP for first shape------#



    for j in range(400):

    

        px = j-200 #px is the northing of the observation point

        py = 0 #py is the easting of the observation point

    

    

        #set the volume integrals to zero for each observation point

        v1 = 0

        v2 = 0

        v3 = 0

        v4 = 0

        v5 = 0

        v6 = 0



        #calculate volume integrals

        for i in range(sides):

            #if last side of polygon

            if(i == sides-1):

                x1 = x[i]-px

                y1 = y[i]-py

                x2 = x[0]-px

                y2 = y[0]-py

            else:

            #all other polygon sides

                x1 = x[i]-px

                y1 = y[i]-py

                x2 = x[i+1]-px

                y2 = y[i+1]-py



            #calculate geometry

            delta_x = x2-x1

            delta_y = y2-y1

            delta_s = ma.sqrt(delta_x**2 + delta_y**2)



            #avoid vdivision by zero if delta_s = 0

            if delta_s == 0:

                delta_s = 0.1



            c = delta_y/delta_s

            s = delta_x/delta_s

            p = (x1*y2 - x2*y1)/delta_s



            d1 = x1*s + y1*c

            d2 = x2*s + y2*c



            r1sq = x1**2 + y1**2

            r2sq = x2**2 + y2**2

            r11 = ma.sqrt(r1sq + z1**2)

            r12 = ma.sqrt(r1sq + z2**2)

            r21 = ma.sqrt(r2sq + z1**2)

            r22 = ma.sqrt(r2sq + z2**2)



            f = ma.log((r22+z2)/(r12+z2) * (r11+z1)/(r21+z1));

            q = ma.log((r22+d2)/(r12+d1) * (r11+d1)/(r21+d2));

            w = ma.atan2((z2*d2),(p*r22)) - \

                ma.atan2((z2*d1),(p*r12)) - \

                ma.atan2((z1*d2),(p*r21)) + \

                ma.atan2((z1*d1),(p*r11))
                
            v1 += s*c*f - c*c*w
            v2 += s*c*w + c*c*f
            v3 += c*q
            v4 += -(s*c*f + s*s*w)
            v5 += -(s*q)
            v6 += w



        #calculate the components of the magnetic field

        bx = prop*(mx*v1 + my*v2 + mz* v3)

        by = prop*(mx*v2 + my*v4 + mz* v5)

        bz = prop*(mx*v3 + my*v5 + mz* v6)



        #calculate total anomaly

        #this calculation works for anomaly << total field strength

        b_total = el*bx + em*by + en*bz



        px_list.append(px)

        m = np.asarray(px_list)



        b_total_list.append(b_total)

        n = np.asarray(b_total_list)



        #uncomment these lines to check volume integral

        #v4 = -(v1+v6)

        #test = -(v1+v6)

        #print(v4,test/n)



        #print results 

        #print (px, b_total)



        df_dist = pd.DataFrame

        df_dist = df_dist(m,columns=['dist'])



        df_mag = pd.DataFrame

        df_mag = df_mag(n,columns=['mag'])

 

        df_model = pd.DataFrame

        df_model = df_dist.join(df_mag)




###############################################

####----------------Variables--------------####

###############################################

line = 8

l = str(line)

in_file = str(save_location)+'\sorted_lines\line_'+str(line)+'.csv'

line_data = pd.read_csv(in_file,sep=' ')

line_data.columns =['index','easting','northing','mag', 'el']


northing = 4264900

magAdj = 0 #Shift model line on y axis

distAdj = 479730 #Shift model line on x axis


#east_min = 479780

#east_max = 479845


#set magnetization (amp/m)

inc = 64

dec = 9

mi = 1.0

#------Upper surface depths of shape-----#

z1 = 9

#------Bottom surface depths of shape-----#

z2 = 20

#--------Polygon Coordinates------------#
x0 = 15
x1 = 15
x2 = 15
x3 = 15

y0 = 100
y1 = 100
y2 = 100
y3 = 100


mag_model = vertical_sided_polygon(cropped_line_data, line, northing, magAdj, distAdj, inc, dec, mi, z1, z2, x0, x1, x2, x3, y0, y1, y2, y3)

mag_model.savefig(save_location+'\line_models\line_model_'+l+'.png')